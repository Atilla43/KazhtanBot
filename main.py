from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

from aiogram.filters import CommandStart

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from aiogram import F # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Magic Filter

# –¢–∞–∫ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º
# from aiogram.utils.executor import start_polling # –ò–∑–º–µ–Ω–µ–Ω–æ!

# import io
import logging as lg
import sqlite3
# import os
# from PIL import Image

# –¢–æ–∫–µ–Ω
TOKEN = "token"
ADMIN_ID="590317122"


# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "users.db"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
class UserForm(StatesGroup):
  fio = State()
  adults = State()
  children = State()
  payment_receipt = State()
  transfer = State()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_db():
  conn = sqlite3.connect(DB_FILE)
  cursor = conn.cursor()
  cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      fio TEXT,
      adults INTEGER,
      children INTEGER,
      payment_receipt BLOB,
      transfer TEXT
    )
  """)
  conn.commit()
  conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_to_db(user_id, fio, adults, children, payment_receipt, transfer):
  conn = sqlite3.connect(DB_FILE)
  cursor = conn.cursor()
  cursor.execute(
    "INSERT INTO users (fio, adults, children, payment_receipt, transfer) VALUES (?, ?, ?, ?, ?)",
    (fio, adults, children, str(payment_receipt), transfer),
  )
  conn.commit()
  conn.close()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_to_admin(user_id, fio, adults, children, payment_receipt, transfer):
  # –ó–∞–º–µ–Ω—è–µ–º BLOB-–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
  # img = Image.open(io.BytesIO(payment_receipt)))
  # img.save("payment_receipt.jpg")

  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  '''
  –æ —É–∂–∞—Å, –º–æ–∏ –≥–ª–∞–∑–∞...
  message = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
  message += f"–§–ò–û: {fio}\n"
  message += f"–í–∑—Ä–æ—Å–ª—ã–µ: {adults}\n"
  message += f"–î–µ—Ç–∏: {children}\n"
  message += f"–¢—Ä–∞–Ω—Å—Ñ–µ—Ä: {transfer}\n"
  '''
  message = f"""
  –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:

    –§–ò–û: {fio}
    –í–∑—Ä–æ—Å–ª—ã–µ: {adults}
    –î–µ—Ç–∏: {children}
    –¢—Ä–∞–Ω—Å—Ñ–µ—Ä: {transfer}
  """

  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
  await bot.send_photo(
    chat_id=ADMIN_ID,
    photo=payment_receipt,
    caption=message,
  )
  await bot.send_photo(
    chat_id=590317122,
    photo=payment_receipt,
    caption=message,
  )

  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  # os.remove("payment_receipt.jpg")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
  await message.answer(
    "–ü—Ä–∏–≤–µ—Ç!üëã\n"
    "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –±—Ä–æ–Ω—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n"
    "–ù–∞—á–Ω—ë–º —Å –≤–∞—à–µ–≥–æ –§–ò–û."
  )
  await state.set_state(UserForm.fio)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û

# –¢–∞–∫ –Ω–µ –Ω–∞–¥–∞
# @dp.message_handler(state=UserForm.fio)
# –ù–∞–¥–∞ –≤–æ—Ç —Ç–∞–∫
@dp.message(UserForm.fio)
async def fio_handler(message: types.Message, state: FSMContext):
  # –¢–∞–∫ –Ω–µ –Ω–∞–¥–∞
  # async with state.proxy() as data:
  # –ù–∞–¥–∞ –≤–æ—Ç —Ç–∞–∫
  await state.update_data(fio=message.text)

  await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –±—É–¥–µ—Ç –µ—Ö–∞—Ç—å?")
  # await UserForm.adults.set() –¢–∞–∫ –Ω–µ –Ω–∞–¥–∞
  await state.set_state(UserForm.adults) # –ù–∞–¥–∞ –≤–æ—Ç —Ç–∞–∫

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—Ä–æ—Å–ª—ã—Ö
# @dp.message_handler(state=UserForm.adults)
@dp.message(UserForm.adults)
async def adults_handler(message: types.Message, state: FSMContext):
  try:
    adults = int(message.text)
    await state.update_data(adults=adults)
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –±—É–¥–µ—Ç –µ—Ö–∞—Ç—å?")
    await state.set_state(UserForm.children)
  except ValueError:
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
@dp.message(UserForm.children)
async def children_handler(message: types.Message, state: FSMContext):
  try:
    children = int(message.text)
    data = await state.get_data()
    await state.update_data(children=children)
    await message.answer(
      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ."
    )
    await state.set_state(UserForm.payment_receipt)
  except ValueError:
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ–∫–∞
@dp.message(F.photo, UserForm.payment_receipt)
async def payment_receipt_handler(message: types.Message, state: FSMContext):
  data = await state.get_data()

  file_id = message.photo[-1].file_id
  file = await bot.get_file(file_id)
  # file_path = file.file_path
  # –£ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  # –ï–≥–æ –º–æ–∂–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–¥–º–∏–Ω—É –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –µ–≥–æ
  # await message.answer_photo(<photo_id>)
          #  await bot.download_file(file_path)
  await state.update_data(payment_receipt = file_id)

  keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
      [
        InlineKeyboardButton(text="–î–∞", callback_data="transfer_yes"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="transfer_no"),
      ]
    ]
  )
  await message.answer(
    "–ù—É–∂–µ–Ω –ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –æ—Ç –ú–µ–¥–≤–µ–∂—å–µ–≥–æ —É–≥–ª–∞ –¥–æ –ú–µ–¥–æ–≤–µ–µ–≤–∫–∏?", reply_markup=keyboard
  )
  await state.set_state(UserForm.transfer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞" –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞

# —Ç–∞–∫ –Ω–µ –Ω–∞–¥–∞
# @dp.callback_query_handler(text="transfer_yes", state=UserForm.transfer)
# –ù–∞–¥–∞ –≤–æ—Ç —Ç–∞–∫
@dp.callback_query(F.data=="transfer_yes", UserForm.transfer)
async def transfer_yes_handler(call: types.CallbackQuery, state: FSMContext):
  await call.message.answer("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω—É–∂–µ–Ω.")
  data = await state.get_data()
  data["transfer"] = "–î–∞"
  await save_to_db(
    "@"+call.from_user.username,
    data["fio"],
    data["adults"],
    data["children"],
    data["payment_receipt"],
    data["transfer"],
  )
  await send_to_admin(
    "@"+call.from_user.username,
    data["fio"],
    data["adults"],
    data["children"],
    data["payment_receipt"],
    data["transfer"],
  )
  await call.message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
  await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
@dp.callback_query(F.data=="transfer_no", UserForm.transfer)
async def transfer_no_handler(call: types.CallbackQuery, state: FSMContext):
  await call.message.answer("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω.")
  data = await state.get_data()
  data["transfer"] = "–ù–µ—Ç"
  await save_to_db(
    "@"+call.from_user.username,
    data["fio"],
    data["adults"],
    data["children"],
    data["payment_receipt"],
    data["transfer"],
  )
  await send_to_admin(
    "@"+call.from_user.username,
    data["fio"],
    data["adults"],
    data["children"],
    data["payment_receipt"],
    data["transfer"],
  )
  await call.message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
  await state.clear()


async def main():
  # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º logger –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
  lg.basicConfig(level=lg.INFO,
                        format="%(asctime)s - [%(levelname)s] - %(asctime)s -  %(name)s - "
                               "(%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
                        )

  await dp.start_polling(bot, skip_updates=True) # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ start_polling

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
  create_db()
  asyncio.run(main())
